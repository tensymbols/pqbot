package ports

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"vkbot/internal/app"
	vkjson "vkbot/internal/presenters"
)

func hello(a app.App) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.WriteString("Hello!")
		c.Writer.Flush()
	}
}

func getFriends(a app.App) gin.HandlerFunc {
	return func(c *gin.Context) {
		userID, err := strconv.ParseInt(c.Param("user_id"), 10, 64)
		if err != nil {
			c.JSON(http.StatusBadRequest, err)
			return
		}
		friends, err := a.GetUserFriends(userID)
		if err != nil {
			c.JSON(http.StatusBadRequest, err)
			return
		}
		c.Writer.WriteString(fmt.Sprint(friends))
		c.Writer.Flush()
		fmt.Println(err)
	}
}

func eventHandler(a app.App) gin.HandlerFunc {
	return func(c *gin.Context) {

		var eventBody vkjson.MessageNewEvent
		err := c.BindJSON(&eventBody)

		if err != nil {
			return
		}
		fmt.Println(eventBody.Type)
		switch eventBody.Type {
		case "message_new":
			text := eventBody.Object.Message.Text
			fromID := eventBody.Object.Message.FromId
			switch {
			case strings.HasPrefix(text, "/chance"):
				text = strings.TrimLeft(text, "/chance")
				if text == "" {
					err = a.SendMessageToUser(fromID, "—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å chance, –≤–≤–µ–¥–∏ /chance [—Å–æ–±—ã—Ç–∏–µ]")
					break
				}
				p := strconv.Itoa(rand.Intn(101))
				err = a.SendMessageToUser(fromID, "üëÅ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ "+text+" ‚Äî "+p+" %")
			case strings.HasPrefix(text, "/true"):
				text = strings.TrimLeft(text, "/true")
				if text == "" {
					err = a.SendMessageToUser(fromID, "—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å true, –≤–≤–µ–¥–∏ /true [—Å–æ–±—ã—Ç–∏–µ]")
					break
				}
				p := rand.Intn(2)
				if p == 1 {
					err = a.SendMessageToUser(fromID, "üß¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ "+text+" ‚Äî –ª–æ–∂—å")
				} else {
					err = a.SendMessageToUser(fromID, "üíØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ "+text+" ‚Äî –ø—Ä–∞–≤–¥–∞")
				}

			case strings.HasPrefix(text, "/help"):
				err = a.SendMessageToUser(fromID,
					"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"+
						"/chance [—Å–æ–±—ã—Ç–∏–µ] - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è\n"+
						"/true [—Å–æ–±—ã—Ç–∏–µ] - –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–¥–∞\n"+
						"/dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫")
			case strings.HasPrefix(text, "/dice"):
				roll := strconv.Itoa(rand.Intn(6) + 1)
				err = a.SendMessageToUser(fromID, "üé≤ –í–∞–º –≤—ã–ø–∞–ª–æ "+roll+" –æ—á–∫–æ–≤")
			default:
				err = a.SendMessageToUser(fromID, []string{
					"–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∏—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
					"–ö–∞–≤–æ",
					"–ê–π –¥–æ–Ω—Ç –∞–Ω–¥–µ—Å—Ç–µ–Ω–¥",
				}[rand.Intn(3)])
			}

			if err != nil {
				c.Status(http.StatusInternalServerError)

			} else {
				c.Status(http.StatusOK)
			}
			c.Writer.WriteString("ok")
			c.Writer.Flush()
		case "confirmation":
			c.Writer.Write([]byte("c09aed4d"))
			c.Status(http.StatusOK)
		}

	}

}

/*func getRandomPrikol() string {

	opts := []string{
		"–ù–ò–ö–¢–û –ù–ï –°–ú–ï–ï–¢ –ú–ù–ï –ü–†–ò–ö–ê–ó–´–í–ê–¢–¨",
		"–ù–£ –ß–¢–û –ï–©–ï",
		"–û–¢–õ–ï–¢–ê–ï–®–¨ –û–ß–ï–†–ï–î–ù–Ø–†–ê",
		"–î–ê –≠–¢–û –ñ–ï–°–¢–ö–û",
		"–ß–¢–û",
		"–†–ï–ë–Ø–¢–ê –ù–ï –°–¢–û–ò–¢ –í–°–ö–†–´–í–ê–¢–¨ –≠–¢–£ –¢–ï–ú–£",
		"–î–ê-–î–ê –ù–ï –£–î–ò–í–õ–Ø–ô–¢–ï–°–¨",
		"–¢–´ –ö–¢–û –¢–ê–ö–û–ô –ß–¢–û–ë–´ –≠–¢–û –î–ï–õ–ê–¢–¨",
	}
	return opts[rand.Intn(len(opts))]
}*/
